https://mp.weixin.qq.com/s/wJDZ-_wc9gk-sjUW6pHHYg
https://baomidou.com/pages/aef2f2/#%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D




使用MyBatisPlus实现多租户功能
点击关注 👉 芋道源码 2022-07-29 10:33 发表于上海
点击上方“芋道源码”，选择“设为星标”

管她前浪，还是后浪？

能浪的浪，才是好浪！

每天 10:33 更新文章，每天掉亿点点头发...

源码精品专栏


原创 | Java 2021 超神之路，很肝~

中文详细注释的开源项目

RPC 框架 Dubbo 源码解析

网络应用框架 Netty 源码解析

消息中间件 RocketMQ 源码解析

数据库中间件 Sharding-JDBC 和 MyCAT 源码解析

作业调度中间件 Elastic-Job 源码解析

分布式事务中间件 TCC-Transaction 源码解析

Eureka 和 Hystrix 源码解析

Java 并发源码

来源：blog.csdn.net/weixin_38111957/

article/details/101161660

一、引言
二、具体实现
三、特定SQL过滤
一、引言
我先解释一下什么叫多租户，什么场景下使用多租户。

多租户是一种软件架构技术，在多用户的环境下，共有同一套系统，并且要注意数据之间的隔离性。

举个实际例子：小编曾经开发过一套H5程序，这套程序应用在不同医院的APP上，当医院患者下载医院APP，并且进入相对应的H5页面，APP则会把用户相关数据传输到小编这里。在传输的时候需要带上医院标识（租户ID），以便小编将数据进行隔离。

当不同的租户使用同一套程序，这里就需要考虑一个数据隔离的情况。

数据隔离有三种方案：

独立数据库：简单来说就是一个租户使用一个数据库，这种数据隔离级别最高，安全性最好，但是提高成本。
共享数据库、隔离数据架构：多租户使用同一个数据裤，但是每个租户对应一个Schema(数据库user)。
共享数据库、共享数据架构：使用同一个数据库，同一个Schema，但是在表中增加了租户ID的字段，这种共享数据程度最高，隔离级别最低。
基于 Spring Boot + MyBatis Plus + Vue & Element 实现的后台管理系统 + 用户小程序，支持 RBAC 动态权限、多租户、数据权限、工作流、三方登录、支付、短信、商城等功能

项目地址：https://gitee.com/zhijiantianya/ruoyi-vue-pro
视频教程：https://doc.iocoder.cn/video/
二、具体实现
这里采用方案三，即共享数据库，共享数据架构，因为这种方案服务器成本最低，但是提高了开发成本。

所以MP就提供了一种多租户的解决方案，实现方式是基于分页插件进行实现的，具体实现代码如下：

@Configuration
public class MyBatisPlusConfig {
    /**
     * 分页插件
     *
     * @return
     */
    @Bean
    public PaginationInterceptor paginationInterceptor() {
        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();

        // 创建SQL解析器集合
        List<ISqlParser> sqlParserList = new ArrayList<>();

        // 创建租户SQL解析器
        TenantSqlParser tenantSqlParser = new TenantSqlParser();

        // 设置租户处理器
        tenantSqlParser.setTenantHandler(new TenantHandler() {
            @Override
            public Expression getTenantId() {
                // 设置当前租户ID，实际情况你可以从cookie、或者缓存中拿都行
                return new StringValue("jiannan");
            }

            @Override
            public String getTenantIdColumn() {
                // 对应数据库租户ID的列名
                return "tenant_id";
            }

            @Override
            public boolean doTableFilter(String tableName) {
                // 是否需要需要过滤某一张表
              /*  List<String> tableNameList = Arrays.asList("sys_user");
                if (tableNameList.contains(tableName)){
                    return true;
                }*/
                return false;
            }
        });

        sqlParserList.add(tenantSqlParser);
        paginationInterceptor.setSqlParserList(sqlParserList);

        return paginationInterceptor;
    }
}
配置好之后，不管是查询、新增、修改删除方法，MP都会自动加上租户ID的标识，测试如下：

@Test
public void select(){
    List<User> users = userMapper.selectList(Wrappers.<User>lambdaQuery().eq(User::getAge, 18));
    users.forEach(System.out::println);
}
DEBUG==>  Preparing: SELECT id, login_name, name, password, email, salt, sex, age, phone, user_type, status, organization_id, create_time, update_time, version, tenant_id FROM sys_user WHERE sys_user.tenant_id = 'jiannan' AND is_delete = '0' AND age = ?
DEBUG==> Parameters: 18(Integer)
DEBUG<==      Total: 0
基于 Spring Cloud Alibaba + Gateway + Nacos + RocketMQ + Vue & Element 实现的后台管理系统 + 用户小程序，支持 RBAC 动态权限、多租户、数据权限、工作流、三方登录、支付、短信、商城等功能

项目地址：https://gitee.com/zhijiantianya/yudao-cloud
视频教程：https://doc.iocoder.cn/video/
三、特定SQL过滤
如果在程序中，有部分SQL不需要加上租户ID的表示，需要过滤特定的sql，可以通过如下两种方式：

方式一：在配置分页插件中加上配置ISqlParserFilter解析器，如果配置SQL很多，比较麻烦，不建议。

paginationInterceptor.setSqlParserFilter(new ISqlParserFilter() {
    @Override
    public boolean doFilter(MetaObject metaObject) {
        MappedStatement ms = SqlParserHelper.getMappedStatement(metaObject);
        // 对应Mapper、dao中的方法
        if("com.example.demo.mapper.UserMapper.selectList".equals(ms.getId())){
            return true;
        }
        return false;
    }
});
方式二：通过租户注解的形式，目前只能作用于Mapper的方法上。

/**
 * 用户 Mapper 接口
 */
public interface UserMapper extends BaseMapper<User> {

    /**
     * 自定Wrapper修改
     *
     * @param userWrapper 条件构造器
     * @param user        修改的对象参数
     * @return
     */
    @SqlParser(filter = true)
    int updateByMyWrapper(@Param(Constants.WRAPPER) Wrapper<User> userWrapper, @Param("user") User user);

}
# 开启 SQL 解析缓存注解生效，如果你的MP版本在3.1.1及以上则不需要配置
mybatis-plus:
  global-config:
    sql-parser-cache: true
现在各大厂内卷的非常厉害，基于 2b 的 saas 系统正在蓬勃发展，多学一些这方面的经验，对职业发展多少有些帮助！本文就讲到这里，感谢大家阅读！

欢迎加入我的知识星球，一起探讨架构，交流源码。加入方式，长按下方二维码噢：

图片

已在知识星球更新源码解析如下：





最近更新《芋道 SpringBoot 2.X 入门》系列，已经 101 余篇，覆盖了 MyBatis、Redis、MongoDB、ES、分库分表、读写分离、SpringMVC、Webflux、权限、WebSocket、Dubbo、RabbitMQ、RocketMQ、Kafka、性能测试等等内容。

提供近 3W 行代码的 SpringBoot 示例，以及超 4W 行代码的电商微服务项目。

获取方式：点“在看”，关注公众号并回复 666 领取，更多内容陆续奉上。


文章有帮助的话，在看，转发吧。

谢谢支持哟 (*^__^*）

阅读原文
喜欢此内容的人还喜欢
使用 LSM-Tree 思想基于.NET 6.0 C# 写个 KV 数据库（案例版）...
dotNET跨平台
不喜欢
不看的原因
内容质量低 不看此公众号

高效开发！合宙LuatIDE 2.2.6版五大亮点全新体验...
合宙LuatOS
不喜欢
不看的原因
内容质量低 不看此公众号

10 大必备 Ubuntu 应用：优选篇 | Linux 中国...
Linux中国
不喜欢
不看的原因
内容质量低 不看此公众号


微信扫一扫
关注该公众号